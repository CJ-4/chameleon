{"version":3,"file":"main.ac293af9e484ab4bca47.bundle.js","sources":["webpack:///./.storybook/config.ts","webpack:///./.storybook/stories/primary.stories.ts","webpack:///./packages/button/src/chameleon-button.ts","webpack:///./packages/input/src/chameleon-input.ts","webpack:///./packages/textarea/src/chameleon-textarea.ts","webpack:///./packages/card/src/chameleon-card.ts","webpack:///./packages/radio/src/chameleon-radio.ts"],"sourcesContent":["import { configure } from \"@storybook/polymer\";\n\nconst req = require.context(\"./stories\", true, /\\.stories\\.ts$/);\n\nfunction loadStories() {\n  req.keys().forEach(req);\n}\n\nconfigure(loadStories, module);\n","import { storiesOf } from \"@storybook/polymer\";\nimport {\n  withKnobs,\n  boolean,\n  radios,\n  text,\n  number\n} from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/button/src/chameleon-button\";\nimport \"../../packages/input/src/chameleon-input\";\nimport \"../../packages/textarea/src/chameleon-textarea\";\nimport \"../../packages/card/src/chameleon-card\";\nimport \"../../packages/radio/src/chameleon-radio\";\n\nconst stories = storiesOf(\"Chameleon\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Button\",\n  () => {\n    const disabled = boolean(\"Disabled\", false);\n    const themeLabel = \"Theme\";\n    const themeOptions = {\n      Primary: \"primary\",\n      Secondary: \"secondary\",\n      Text: \"text\"\n    };\n    const defaultThemeValue = \"primary\";\n    const theme = radios(themeLabel, themeOptions, defaultThemeValue);\n\n    return html`\n      <chameleon-button ?disabled=\"${disabled}\" theme=\"${theme}\"\n        >Button</chameleon-button\n      >\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Input\",\n  () => {\n    const disabled = boolean(\"Disabled\", false);\n    const label = text(\"Label\", \"\");\n    const error = text(\"Error\", \"\");\n    const placeholder = text(\"Placeholder\", \"Text...\");\n    const typeOptions = {\n      Text: \"text\",\n      Password: \"password\",\n      Email: \"email\",\n      Number: \"number\",\n      Search: \"search\",\n      Tel: \"tel\",\n      Url: \"url\"\n    };\n    const defaultThemeValue = \"text\";\n    const typeSelection = radios(\"Type\", typeOptions, defaultThemeValue);\n\n    return html`\n      <h3>Field / Basic</h3>\n      <chameleon-input\n        ?disabled=\"${disabled}\"\n        .type=\"${typeSelection}\"\n        .placeholder=\"${placeholder}\"\n        .label=\"${label}\"\n        .validationMessage=\"${error}\"\n      ></chameleon-input>\n      <h3>Field / Icon Left</h3>\n      <chameleon-input\n        ?disabled=\"${disabled}\"\n        icon-left\n        .type=\"${typeSelection}\"\n        .placeholder=\"${placeholder}\"\n        .label=\"${label}\"\n        .validationMessage=\"${error}\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          class=\"feather feather-search\"\n          slot=\"icon-left\"\n        >\n          <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n          <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n        </svg>\n      </chameleon-input>\n      <h3>Field / Icon Right</h3>\n      <chameleon-input\n        ?disabled=\"${disabled}\"\n        icon-right\n        .type=\"${typeSelection}\"\n        .placeholder=\"${placeholder}\"\n        .label=\"${label}\"\n        .validationMessage=\"${error}\"\n      >\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"24\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"2\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          class=\"feather feather-search\"\n          slot=\"icon-right\"\n        >\n          <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n          <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n        </svg>\n      </chameleon-input>\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Textarea\",\n  () => {\n    const disabled = boolean(\"Disabled\", false);\n    const label = text(\"Label\", \"\");\n    const error = text(\"Error\", \"\");\n    const placeholder = text(\"Placeholder\", \"Text...\");\n    const minlength = number(\"minlength\", 0);\n    const maxlength = number(\"maxlength\", 500);\n    const rows = number(\"Rows\", 2);\n    const cols = number(\"Columns\", 20);\n\n    return html`\n      <chameleon-textarea\n        ?disabled=\"${disabled}\"\n        .placeholder=\"${placeholder}\"\n        .label=\"${label}\"\n        .validationMessage=\"${error}\"\n        .minlength=\"${minlength}\"\n        .maxlength=\"${maxlength}\"\n        .rows=\"${rows}\"\n        .cols=\"${cols}\"\n      ></chameleon-textarea>\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Card\",\n  () => {\n    return html`\n      <chameleon-card>\n        <h3>Card</h3>\n        <p>Here is some sample content for the card</p>\n      </chameleon-card>\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Radio\",\n  () => {\n    const label = text(\"Label\", \"\");\n    const checked = boolean(\"Checked\", true);\n\n    return html`\n      <chameleon-radio\n        label=\"${label}\"\n        name=\"test\"\n        ?checked=\"${checked}\"\n      ></chameleon-radio>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/button\";\n\n@customElement(\"chameleon-button\")\nexport default class ChameleonButton extends LitElement {\n  /**\n   * Properties\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n  @property({ type: String, reflect: true })\n  theme = \"primary\";\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <button\n        class=\"${classMap({ [this.theme]: true })}\"\n        ?disabled=\"${this.disabled}\"\n      >\n        <slot></slot>\n      </button>\n    `;\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { nothing } from \"lit-html\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/input\";\n\n@customElement(\"chameleon-input\")\nexport default class ChameleonInput extends LitElement {\n  /**\n   * Properties\n   */\n  // A string indicating the type of autocomplete functionality, if any, to allow on the input\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  // A Boolean which, if present, makes the input take focus when the form is presented\n  @property({ type: Boolean, reflect: true })\n  autofocus = false;\n\n  // A Boolean attribute which is present if the input should be disabled\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  // A Boolean attribute which, if true, indicates that the input cannot be edited\n  @property({ type: Boolean, reflect: true })\n  readonly = false;\n\n  // A Boolean which, if true, indicates that the input must have a value before the form can be submitted\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  // A string indicating which input type the <input> element represents\n  @property({ type: String, reflect: true })\n  type = \"text\";\n\n  @property({ type: String, reflect: true })\n  placeholder = \"\";\n\n  // The input's current value\n  @property({ type: String })\n  value = \"\";\n\n  // The input's min value (available in type=\"number\")\n  @property({ type: Number, reflect: true })\n  min = null;\n\n  // The input's max value (available in type=\"number\")\n  @property({ type: Number, reflect: true })\n  max = null;\n\n  // The input's label\n  @property({ type: String })\n  label = \"\";\n\n  // The input's error message\n  @property({ type: String })\n  validationMessage = \"\";\n\n  // Element has a left icon\n  @property({ type: Boolean, reflect: true })\n  \"icon-left\" = false;\n\n  // Element has a right icon\n  @property({ type: Boolean, reflect: true })\n  \"icon-right\" = false;\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      ${this.labelText}\n      <div\n        class=\"${classMap({\n          \"input-wrapper\": true,\n          \"icon-left\": this[\"icon-left\"],\n          \"icon-right\": this[\"icon-right\"]\n        })}\"\n      >\n        <slot name=\"icon-left\"></slot>\n        ${this._inputEl}\n        <slot name=\"icon-right\"></slot>\n      </div>\n      ${this.errorText}\n    `;\n  }\n\n  get _inputEl(): TemplateResult {\n    switch (this.type) {\n      case \"text\":\n        return html`\n          <input\n            name=\"cha-input\"\n            .type=\"${this.type}\"\n            .placeholder=\"${this.placeholder}\"\n            .value=\"${this.value}\"\n            ?autocomplete=\"${this.autocomplete}\"\n            ?autofocus=\"${this.autofocus}\"\n            ?disabled=\"${this.disabled}\"\n            ?readonly=\"${this.readonly}\"\n            ?required=\"${this.required}\"\n            @input=\"${this._handleInput}\"\n            @blur=\"${this._handleBlur}\"\n            @invalid=\"${this._handleInvalid}\"\n          />\n        `;\n      case \"number\":\n        return html`\n          <input\n            name=\"cha-input\"\n            .type=\"${this.type}\"\n            .placeholder=\"${this.placeholder}\"\n            .value=\"${this.value}\"\n            .min=\"${this.min}\"\n            .max=\"${this.max}\"\n            ?autocomplete=\"${this.autocomplete}\"\n            ?autofocus=\"${this.autofocus}\"\n            ?disabled=\"${this.disabled}\"\n            ?readonly=\"${this.readonly}\"\n            ?required=\"${this.required}\"\n            @input=\"${this._handleInput}\"\n            @blur=\"${this._handleBlur}\"\n            @invalid=\"${this._handleInvalid}\"\n          />\n        `;\n      default:\n        return html`\n          <input\n            name=\"cha-input\"\n            .type=\"${this.type}\"\n            .placeholder=\"${this.placeholder}\"\n            .value=\"${this.value}\"\n            ?autocomplete=\"${this.autocomplete}\"\n            ?autofocus=\"${this.autofocus}\"\n            ?disabled=\"${this.disabled}\"\n            ?readonly=\"${this.readonly}\"\n            ?required=\"${this.required}\"\n            @input=\"${this._handleInput}\"\n            @blur=\"${this._handleBlur}\"\n            @invalid=\"${this._handleInvalid}\"\n          />\n        `;\n    }\n  }\n\n  get _el(): HTMLInputElement | null {\n    if (this.shadowRoot !== null) {\n      return this.shadowRoot.querySelector(\"input\");\n    } else return null;\n  }\n\n  get labelText(): TemplateResult | object {\n    if (this.label !== \"\") {\n      return html`\n        <label for=\"cha-input\">${this.label}</label>\n      `;\n    } else return nothing;\n  }\n\n  get errorText(): TemplateResult | object {\n    if (this.validationMessage !== \"\") {\n      return html`\n        <span class=\"error\">${this.validationMessage}</span>\n      `;\n    } else return nothing;\n  }\n\n  get validity(): ValidityState | undefined {\n    if (this._el !== null) return this._el.validity;\n    else return undefined;\n  }\n\n  get willValidate(): boolean {\n    if (this._el !== null) return this._el.willValidate;\n    else return false;\n  }\n\n  checkValidity(): boolean {\n    if (this._el !== null) return this._el.checkValidity();\n    else return false;\n  }\n\n  _handleInput(e: any): void {\n    // e must have a value of `any` right now because of: https://stackoverflow.com/a/57331338/3713527\n    this.value = e.target.value;\n  }\n\n  _handleBlur(): void {\n    this.checkValidity();\n  }\n\n  _handleInvalid(): void {\n    this.validationMessage =\n      this._el !== null ? this._el.validationMessage : \"\";\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { nothing } from \"lit-html\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/textarea\";\n\n@customElement(\"chameleon-textarea\")\nexport default class ChameleonTextarea extends LitElement {\n  /**\n   * Properties\n   */\n  // A string indicating the type of autocomplete functionality, if any, to allow on the input\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  // A Boolean which, if present, makes the textarea take focus when the form is presented\n  @property({ type: Boolean, reflect: true })\n  autofocus = false;\n\n  // The visible width of the text control, in average character widths.\n  // If it is specified, it must be a positive integer. If it is not specified,\n  // the default value is 20.\n  @property({ type: Number, reflect: true })\n  cols = 20;\n\n  // A Boolean attribute which is present if the textarea should be disabled\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  // The maximum number of characters (unicode code points) that the user can enter. If this value isn't specified, the user can enter an unlimited number of characters.\n  @property({ type: Number, reflect: true })\n  maxlength = null;\n\n  // The minimum number of characters (unicode code points) required that the user should enter.\n  @property({ type: Number, reflect: true })\n  minlength = null;\n\n  // A hint to the user of what can be entered in the control. Carriage returns or line-feeds within the placeholder text must be treated as line breaks when rendering the hint.\n  @property({ type: String, reflect: true })\n  placeholder = \"\";\n\n  // A Boolean attribute which, if true, indicates that the textarea cannot be edited\n  @property({ type: Boolean, reflect: true })\n  readonly = false;\n\n  // A Boolean which, if true, indicates that the textarea must have a value before the form can be submitted\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  // The number of visible text lines for the control.\n  @property({ type: Number, reflect: true })\n  rows = 2;\n\n  // Specifies whether the <textarea> is subject to spell checking by the underlying browser/OS.\n  @property({ type: Boolean, reflect: true })\n  spellcheck = false;\n\n  // The textarea's current value\n  @property({ type: String })\n  value = \"\";\n\n  // The textarea's label\n  @property({ type: String })\n  label = \"\";\n\n  // The textarea's error message\n  @property({ type: String })\n  validationMessage = \"\";\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      ${this.labelText}\n      <textarea\n        name=\"cha-textarea\"\n        .value=\"${this.value}\"\n        ?autocomplete=\"${this.autocomplete}\"\n        ?autofocus=\"${this.autofocus}\"\n        cols=\"${this.cols}\"\n        ?disabled=\"${this.disabled}\"\n        maxlength=\"${this.maxlength}\"\n        minlength=\"${this.minlength}\"\n        placeholder=\"${this.placeholder}\"\n        ?readonly=\"${this.readonly}\"\n        ?required=\"${this.required}\"\n        rows=\"${this.rows}\"\n        spellcheck=\"${this.spellcheck}\"\n        @blur=\"${this._handleBlur}\"\n        @invalid=\"${this._handleInvalid}\"\n      ></textarea>\n      ${this.errorText}\n    `;\n  }\n\n  get _el(): HTMLTextAreaElement | null {\n    if (this.shadowRoot !== null) {\n      return this.shadowRoot.querySelector(\"textarea\");\n    } else return null;\n  }\n\n  get labelText(): TemplateResult | object {\n    if (this.label !== \"\") {\n      return html`\n        <label for=\"cha-textarea\">${this.label}</label>\n      `;\n    } else return nothing;\n  }\n\n  get errorText(): TemplateResult | object {\n    if (this.validationMessage !== \"\") {\n      return html`\n        <span class=\"error\">${this.validationMessage}</span>\n      `;\n    } else return nothing;\n  }\n\n  get validity(): ValidityState | undefined {\n    if (this._el !== null) return this._el.validity;\n    else return undefined;\n  }\n\n  get willValidate(): boolean {\n    if (this._el !== null) return this._el.willValidate;\n    else return false;\n  }\n\n  checkValidity(): boolean {\n    if (this._el !== null) return this._el.checkValidity();\n    else return false;\n  }\n\n  _handleBlur(): void {\n    this.checkValidity();\n  }\n\n  _handleInvalid(): void {\n    this.validationMessage =\n      this._el !== null ? this._el.validationMessage : \"\";\n  }\n}\n","import { LitElement, TemplateResult, customElement, html } from \"lit-element\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/card\";\n\n@customElement(\"chameleon-card\")\nexport default class ChameleonCard extends LitElement {\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <slot></slot>\n    `;\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { nothing } from \"lit-html\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/radio\";\n\n@customElement(\"chameleon-radio\")\nexport default class ChameleonRadio extends LitElement {\n  /**\n   * Properties\n   */\n\n  // The radio's label\n  @property({ type: String })\n  label = \"\";\n\n  // A Boolean which, if true, indicates that the radio is selected\n  @property({ type: Boolean, reflect: true })\n  checked = false;\n\n  // The radio's current value\n  @property({ type: String })\n  value = \"\";\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <input type=\"radio\" ?checked=\"${this.checked}\" value=\"${this.value}\" />\n      <span class=\"checkmark\"></span>\n      ${this.labelText}\n    `;\n  }\n\n  get labelText(): string | object {\n    if (this.label !== \"\") return this.label;\n    else return nothing;\n  }\n}\n"],"mappings":"AAAA;ACmCA;;;AAKA;;;AAyBA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAqBA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AAqBA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;;;;AAaA;;AAWA;;AAEA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3KA;;AAoBA;AACA;;;;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA;AAqEA;;AAEA;;;AAOA;;;AAGA;AAIA;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AASA;AAEA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACnKA;AAwEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAIA;AASA;AAEA;AAMA;AAEA;;;;;;;ACxHA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;AA2BA;;AAEA;AAIA;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}