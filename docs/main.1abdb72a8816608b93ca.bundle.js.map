{"version":3,"file":"main.1abdb72a8816608b93ca.bundle.js","sources":["webpack:///./packages/theme/base/index.ts","webpack:///./packages/theme/base/skeleton/index.ts","webpack:///./packages/skeleton/src/chameleon-skeleton.ts","webpack:///./.storybook/stories/button.stories.ts","webpack:///./.storybook/stories/card.stories.ts","webpack:///./.storybook/stories/checkbox.stories.ts","webpack:///./.storybook/stories/chip.stories.ts","webpack:///./.storybook/stories/hero.stories.ts","webpack:///./.storybook/stories/input.stories.ts","webpack:///./.storybook/stories/loader.stories.ts","webpack:///./.storybook/stories/radio.stories.ts","webpack:///./.storybook/stories/rice-ball-dessert.stories.ts","webpack:///./.storybook/stories/skeleton.stories.ts","webpack:///./.storybook/stories/switch.stories.ts","webpack:///./.storybook/stories/tabs.stories.ts","webpack:///./packages/tabs/src/chameleon-tab.ts","webpack:///./.storybook/stories/textarea.stories.ts","webpack:///./packages/button/src/chameleon-button.ts","webpack:///./packages/card/src/chameleon-card.ts","webpack:///./packages/card-header/src/chameleon-card-header.ts","webpack:///./packages/card-image/src/chameleon-card-image.ts","webpack:///./packages/checkbox/src/chameleon-checkbox.ts","webpack:///./packages/chip/src/chameleon-chip.ts","webpack:///./packages/hero/src/chameleon-hero.ts","webpack:///./packages/input/src/chameleon-input.ts","webpack:///./packages/loader/src/chameleon-loader.ts","webpack:///./packages/radio/src/chameleon-radio.ts","webpack:///./packages/rice-ball-dessert/src/chameleon-rice-ball-dessert.ts","webpack:///./packages/switch/src/chameleon-switch.ts","webpack:///./packages/tabs/src/chameleon-tabs.ts","webpack:///./packages/textarea/src/chameleon-textarea.ts"],"sourcesContent":["import { css } from \"lit-element\";\n\nexport default css`\n  :host {\n    --border-radius: 0.5em;\n    --border-radius-input: 0.313em;\n    --button-padding: 0.75em 1.375em;\n    --input-padding: 0.625em 0.5em;\n    --textarea-padding: 0.438em 0.813em;\n\n    --color-surface: #ffffff;\n    --color-black: #000000;\n    --color-primary: #2c6fb7;\n    --color-primary-dark: #004587;\n    --color-secondary: #69c9b9;\n    --color-secondary-dark: #349889;\n    --color-error: #bc1c16;\n    --color-gray-lightest: #e1e3e4;\n    --color-gray-light: #c4c7ca;\n    --color-gray-darkest: #6c737a;\n    --color-box-shadow: rgba(159, 164, 168, 0.6);\n\n    --font-letter-spacing: 0.018em;\n    --font-size-paragraph-medium: 0.938em;\n    --font-size-subtitle: 0.938em;\n    --font-size-title: 1.4em;\n    --font-size-input: 0.938em;\n    --font-size-label: 0.875em;\n    --font-family: Arial, Helvetica, sans-serif;\n  }\n`;\n","import { css } from \"lit-element\";\n\nexport default css`\n  .rectangle {\n    fill: var(--color-gray-lightest);\n  }\n`;\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/skeleton\";\n\n@customElement(\"chameleon-skeleton\")\nexport default class ChameleonSkeleton extends LitElement {\n  /**\n   * Properties\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n  @property({ type: String, reflect: true })\n  theme = \"primary\";\n  @property({ type: String, reflect: true })\n  height = \"100%\";\n  @property({ type: String, reflect: true })\n  width = \"100%\";\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    //TODO: add linear gradient animation\n    /*\n      <defs>\n        <mask id=\"animation\">\n          <rect x=\"0\" y=\"0\" width=\"${this.width}\" height=\"${this.height}\" rx=\"10\" ry=\"10\" fill=\"url(#shine)\"/>\n        </mask>\n      </defs>\n    */\n    return html`\n      <svg height=\"${this.height}\" width=\"${this.width}\">\n        <rect\n          class=\"rectangle\"\n          height=\"100%\"\n          width=\"100%\"\n          x=\"0\"\n          y=\"0\"\n          rx=\"10\"\n          ry=\"10\"\n        />\n      </svg>\n    `;\n  }\n}\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs, boolean, radios } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/button/src/chameleon-button\";\n\nconst stories = storiesOf(\"Button\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Primary\",\n  () => {\n    const disabled = boolean(\"Disabled\", false);\n    const fullWidth = boolean(\"Full Width\", false);\n\n    return html`\n      <chameleon-button\n        ?disabled=\"${disabled}\"\n        theme=\"primary\"\n        ?full-width=\"${fullWidth}\"\n        >Button</chameleon-button\n      >\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Secondary\",\n  () => {\n    const disabled = boolean(\"Disabled\", false);\n    const fullWidth = boolean(\"Full Width\", false);\n\n    return html`\n      <chameleon-button\n        ?disabled=\"${disabled}\"\n        theme=\"secondary\"\n        ?full-width=\"${fullWidth}\"\n        >Button</chameleon-button\n      >\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Text\",\n  () => {\n    const disabled = boolean(\"Disabled\", false);\n    const fullWidth = boolean(\"Full Width\", false);\n\n    return html`\n      <chameleon-button\n        ?disabled=\"${disabled}\"\n        theme=\"text\"\n        ?full-width=\"${fullWidth}\"\n        >Button</chameleon-button\n      >\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs, text } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/card/src/chameleon-card\";\nimport \"../../packages/card-header/src/chameleon-card-header\";\nimport \"../../packages/card-image/src/chameleon-card-image\";\n\nconst stories = storiesOf(\"Card\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.addParameters({\n  backgrounds: [\n    { name: \"gray\", value: \"#f5f5f8\", default: true },\n    { name: \"black\", value: \"#252a33\" }\n  ]\n});\n\nstories.add(\n  \"Basic\",\n  () => {\n    const subtitleText = text(\"Subtitle\", \"Destination\");\n    const titleText = text(\"Title\", \"St. Louis, MO\");\n\n    return html`\n      <chameleon-card>\n        <chameleon-card-header\n          title=\"${titleText}\"\n          subtitle=\"${subtitleText}\"\n        ></chameleon-card-header>\n        <p>Here is some sample content for the card</p>\n      </chameleon-card>\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Outline\",\n  () => {\n    return html`\n      <chameleon-card outline>\n        <h3>Card</h3>\n        <p>Here is some sample content for the card</p>\n      </chameleon-card>\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Image\",\n  () => {\n    const subtitleText = text(\"Subtitle\", \"Destination\");\n    const titleText = text(\"Title\", \"St. Louis, MO\");\n    const imageSrc = text(\n      \"Image Source\",\n      \"https://images.unsplash.com/photo-1474644746397-786f431dc663?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1080&q=80\"\n    );\n    const altText = text(\"ALT Text\", \"St. Louis Landscape\");\n\n    return html`\n      <chameleon-card rounded>\n        <chameleon-card-header\n          title=\"${titleText}\"\n          subtitle=\"${subtitleText}\"\n        ></chameleon-card-header>\n        <chameleon-card-image\n          src=\"${imageSrc}\"\n          alt=\"${altText}\"\n        ></chameleon-card-image>\n        <p>\n          Sample textâ€¦Lorem ipsum dolor sit amet, consectetuer adipiscing elit.\n          Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut\n          turpis.\n        </p>\n      </chameleon-card>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs, boolean, text } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/checkbox/src/chameleon-checkbox\";\n\nconst stories = storiesOf(\"Checkbox\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Checkbox\",\n  () => {\n    const label = text(\"Label\", \"\");\n    const checked = boolean(\"Checked\", true);\n\n    return html`\n      <chameleon-checkbox\n        label=\"${label}\"\n        name=\"test\"\n        ?checked=\"${checked}\"\n      ></chameleon-checkbox>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs } from \"@storybook/addon-knobs\";\nimport { html, svg } from \"lit-html\";\nimport \"../../packages/chip/src/chameleon-chip\";\n\nconst stories = storiesOf(\"Chip\", module);\n\nconst searchIcon = svg`<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-x\"><line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line><line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line></svg>`;\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Chip\",\n  () => {\n    return html`\n      <chameleon-chip>Crunchy</chameleon-chip>\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"With Icon\",\n  () => {\n    return html`\n      <chameleon-chip closeable>Crunchy ${searchIcon}</chameleon-chip>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs, text, number, boolean } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/hero/src/chameleon-hero\";\n\nconst stories = storiesOf(\"Hero\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"CSS Gradient\",\n  () => {\n    const title = text(\"Title\", \"St. Louis, MO\");\n    const subtitle = text(\"Subtitle\", \"Destination\");\n    const heroText = text(\n      \"Text\",\n      \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Laoreet non curabitur gravida arcu ac tortor dignissim convallis aenean. Viverra adipiscing at in tellus integer feugiat.\"\n    );\n    const gradientColors = text(\"Hex Colors\", \"#B72126, #14264B\");\n    const heroType = \"gradient\";\n    const loading = boolean(\"Loading\", false);\n\n    return html`\n      <chameleon-hero\n        title=\"${title}\"\n        subTitle=\"${subtitle}\"\n        heroText=\"${heroText}\"\n        gradient=\"${gradientColors}\"\n        type=\"${heroType}\"\n        ?loading=\"${loading}\"\n      >\n      </chameleon-hero>\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Background Image\",\n  () => {\n    const title = text(\"Title\", \"Washington, DC\");\n    const subtitle = text(\"Subtitle\", \"Destination\");\n    const heroText = text(\n      \"Text\",\n      \"Cursus eget nunc scelerisque viverra mauris in. Tellus integer feugiat scelerisque varius. Nisl purus in mollis nunc sed id. Risus viverra adipiscing at in tellus.\"\n    );\n    const imageUrl = text(\"Image URL\", \"https://picsum.photos/id/122/2100/856\");\n    const heroType = \"image\";\n    const loading = boolean(\"Loading\", false);\n\n    return html`\n      <chameleon-hero\n        title=\"${title}\"\n        subTitle=\"${subtitle}\"\n        heroText=\"${heroText}\"\n        imageUrl=\"${imageUrl}\"\n        type=\"${heroType}\"\n        ?loading=\"${loading}\"\n      >\n      </chameleon-hero>\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Image Gradient\",\n  () => {\n    const title = text(\"Title\", \"New York, NY\");\n    const subtitle = text(\"Subtitle\", \"Destination\");\n    const heroText = text(\n      \"Text\",\n      \"Cursus eget nunc scelerisque viverra mauris in. Tellus integer feugiat scelerisque varius. Nisl purus in mollis nunc sed id. Risus viverra adipiscing at in tellus.\"\n    );\n    const imageUrl = text(\"Image URL\", \"https://picsum.photos/id/703/2100/856\");\n    const heroType = \"imageGradient\";\n    const gradientColors = text(\"Hex Colors\", \"#B72126, #14264B\");\n    const gradientAlpha = number(\"Gradient Alpha\", 0.5);\n    const loading = boolean(\"Loading\", false);\n\n    return html`\n      <chameleon-hero\n        title=\"${title}\"\n        subTitle=\"${subtitle}\"\n        heroText=\"${heroText}\"\n        imageUrl=\"${imageUrl}\"\n        type=\"${heroType}\"\n        gradient=\"${gradientColors}\"\n        gradientAlpha=\"${gradientAlpha}\"\n        ?loading=\"${loading}\"\n      >\n      </chameleon-hero>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs, boolean, radios, text } from \"@storybook/addon-knobs\";\nimport { html, svg } from \"lit-html\";\nimport \"../../packages/input/src/chameleon-input\";\n\nconst stories = storiesOf(\"Input\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nconst searchIcon = slot => svg`\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    stroke-width=\"2\"\n    stroke-linecap=\"round\"\n    stroke-linejoin=\"round\"\n    class=\"feather feather-search\"\n    slot=\"${slot}\"\n  >\n    <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n    <line x1=\"21\" y1=\"21\" x2=\"16.65\" y2=\"16.65\"></line>\n  </svg>\n`;\n\nstories.add(\n  \"Basic\",\n  () => {\n    const disabled = boolean(\"Disabled\", false);\n    const label = text(\"Label\", \"\");\n    const error = text(\"Error\", \"\");\n    const placeholder = text(\"Placeholder\", \"Text...\");\n    const typeOptions = {\n      Text: \"text\",\n      Password: \"password\",\n      Email: \"email\",\n      Number: \"number\",\n      Search: \"search\",\n      Tel: \"tel\",\n      Url: \"url\"\n    };\n    const defaultThemeValue = \"text\";\n    const typeSelection = radios(\"Type\", typeOptions, defaultThemeValue);\n\n    return html`\n      <chameleon-input\n        ?disabled=\"${disabled}\"\n        .type=\"${typeSelection}\"\n        .placeholder=\"${placeholder}\"\n        .label=\"${label}\"\n        .validationMessage=\"${error}\"\n      ></chameleon-input>\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Icon Left\",\n  () => {\n    const disabled = boolean(\"Disabled\", false);\n    const label = text(\"Label\", \"\");\n    const error = text(\"Error\", \"\");\n    const placeholder = text(\"Placeholder\", \"Text...\");\n    const typeOptions = {\n      Text: \"text\",\n      Password: \"password\",\n      Email: \"email\",\n      Number: \"number\",\n      Search: \"search\",\n      Tel: \"tel\",\n      Url: \"url\"\n    };\n    const defaultThemeValue = \"text\";\n    const typeSelection = radios(\"Type\", typeOptions, defaultThemeValue);\n\n    return html`\n      <chameleon-input\n        ?disabled=\"${disabled}\"\n        icon-left\n        .type=\"${typeSelection}\"\n        .placeholder=\"${placeholder}\"\n        .label=\"${label}\"\n        .validationMessage=\"${error}\"\n      >\n        ${searchIcon(\"icon-left\")}\n      </chameleon-input>\n    `;\n  },\n  { info: { inline: true } }\n);\n\nstories.add(\n  \"Icon Right\",\n  () => {\n    const disabled = boolean(\"Disabled\", false);\n    const label = text(\"Label\", \"\");\n    const error = text(\"Error\", \"\");\n    const placeholder = text(\"Placeholder\", \"Text...\");\n    const typeOptions = {\n      Text: \"text\",\n      Password: \"password\",\n      Email: \"email\",\n      Number: \"number\",\n      Search: \"search\",\n      Tel: \"tel\",\n      Url: \"url\"\n    };\n    const defaultThemeValue = \"text\";\n    const typeSelection = radios(\"Type\", typeOptions, defaultThemeValue);\n\n    return html`\n      <chameleon-input\n        ?disabled=\"${disabled}\"\n        icon-right\n        .type=\"${typeSelection}\"\n        .placeholder=\"${placeholder}\"\n        .label=\"${label}\"\n        .validationMessage=\"${error}\"\n      >\n        ${searchIcon(\"icon-right\")}\n      </chameleon-input>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/loader/src/chameleon-loader\";\n\nconst stories = storiesOf(\"Loader\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Loader\",\n  () => {\n    return html`\n      <chameleon-loader></chameleon-loader>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs, boolean, text } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/radio/src/chameleon-radio\";\n\nconst stories = storiesOf(\"Radio\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Radio\",\n  () => {\n    const label = text(\"Label\", \"\");\n    const checked = boolean(\"Checked\", true);\n    const disabled = boolean(\"Disabled\", false);\n\n    return html`\n      <chameleon-radio\n        label=\"${label}\"\n        name=\"test\"\n        ?checked=\"${checked}\"\n        ?disabled=${disabled}\n      ></chameleon-radio>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs, text } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/rice-ball-dessert/src/chameleon-rice-ball-dessert\";\n\nconst stories = storiesOf(\"Rice Ball Dessert\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Basic\",\n  () => {\n    return html`\n      <chameleon-rice-ball-dessert></chameleon-rice-ball-dessert>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs, text } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/skeleton/src/chameleon-skeleton\";\n\nconst stories = storiesOf(\"Skeleton\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Skeleton\",\n  () => {\n    const height = text(\"Height\", \"100%\");\n    const width = text(\"Width\", \"100%\");\n\n    return html`\n      <chameleon-skeleton height=\"${height}\" width=\"${width}\">\n      </chameleon-skeleton>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs, boolean, text } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/switch/src/chameleon-switch\";\n\nconst stories = storiesOf(\"Switch\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Switch\",\n  () => {\n    const label = text(\"Label\", \"\");\n    const checked = boolean(\"Checked\", true);\n\n    return html`\n      <chameleon-switch\n        label=\"${label}\"\n        name=\"test\"\n        ?checked=\"${checked}\"\n      ></chameleon-switch>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/tabs/src/chameleon-tabs\";\nimport \"../../packages/tabs/src/chameleon-tab\";\n\nconst stories = storiesOf(\"Tabs\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Tabs\",\n  () => {\n    return html`\n      <chameleon-tabs selected=\"0\">\n        <chameleon-tab>\n          Tab One\n        </chameleon-tab>\n        <chameleon-tab>\n          Tab Two\n        </chameleon-tab>\n        <chameleon-tab>\n          Tab Three\n        </chameleon-tab>\n      </chameleon-tabs>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import { LitElement, TemplateResult, customElement, html } from \"lit-element\";\n\n@customElement(\"chameleon-tab\")\nexport default class ChameleonTab extends LitElement {\n  constructor() {\n    super();\n    this.addEventListener(\"click\", this.handleToggle);\n  }\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <slot></slot>\n    `;\n  }\n\n  handleToggle(): void {\n    this.dispatchEvent(\n      new CustomEvent(\"selected-changed\", {\n        detail: {\n          value: this.dataset.index\n        },\n        bubbles: true,\n        composed: true\n      })\n    );\n  }\n}\n","import { storiesOf } from \"@storybook/polymer\";\nimport { withKnobs, boolean, text, number } from \"@storybook/addon-knobs\";\nimport { html } from \"lit-html\";\nimport \"../../packages/textarea/src/chameleon-textarea\";\n\nconst stories = storiesOf(\"Textarea\", module);\n\n// Typecasting this as \"any\" is a quick workaround. Please come back\n// to this and make these types compatible.\nstories.addDecorator(withKnobs as any);\n\nstories.add(\n  \"Textarea\",\n  () => {\n    const disabled = boolean(\"Disabled\", false);\n    const label = text(\"Label\", \"\");\n    const error = text(\"Error\", \"\");\n    const placeholder = text(\"Placeholder\", \"Text...\");\n    const minlength = number(\"minlength\", 0);\n    const maxlength = number(\"maxlength\", 500);\n    const rows = number(\"Rows\", 2);\n    const cols = number(\"Columns\", 20);\n\n    return html`\n      <chameleon-textarea\n        ?disabled=\"${disabled}\"\n        .placeholder=\"${placeholder}\"\n        .label=\"${label}\"\n        .validationMessage=\"${error}\"\n        .minlength=\"${minlength}\"\n        .maxlength=\"${maxlength}\"\n        .rows=\"${rows}\"\n        .cols=\"${cols}\"\n      ></chameleon-textarea>\n    `;\n  },\n  { info: { inline: true } }\n);\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/button\";\n\n@customElement(\"chameleon-button\")\nexport default class ChameleonButton extends LitElement {\n  /**\n   * Properties\n   */\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n  @property({ type: String, reflect: true })\n  theme = \"primary\";\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <button\n        class=\"${classMap({ [this.theme]: true })}\"\n        ?disabled=\"${this.disabled}\"\n      >\n        <slot></slot>\n      </button>\n    `;\n  }\n}\n","import { LitElement, TemplateResult, customElement, html } from \"lit-element\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/card\";\n\n@customElement(\"chameleon-card\")\nexport default class ChameleonCard extends LitElement {\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <slot></slot>\n    `;\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { nothing } from \"lit-html\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/card-header\";\n\n@customElement(\"chameleon-card-header\")\nexport default class ChameleonCardHeader extends LitElement {\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Properties\n   */\n  @property({ type: String })\n  title = \"\";\n  @property({ type: String })\n  subtitle = \"\";\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      ${this.subtitle !== \"\"\n        ? html`\n            <h3>${this.subtitle}</h3>\n          `\n        : nothing}\n      ${this.title !== \"\"\n        ? html`\n            <h2>${this.title}</h2>\n          `\n        : nothing}\n    `;\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/card-image\";\n\n@customElement(\"chameleon-card-image\")\nexport default class ChameleonCardImage extends LitElement {\n  /**\n   * Properties\n   */\n\n  // The image's source URL\n  @property({ type: String })\n  src = \"\";\n\n  // The image's alt text\n  @property({ type: String })\n  alt = \"\";\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <img src=\"${this.src}\" alt=\"${this.alt}\" />\n    `;\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { nothing } from \"lit-html\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/checkbox\";\n\n@customElement(\"chameleon-checkbox\")\nexport default class ChameleonCheckbox extends LitElement {\n  /**\n   * Properties\n   */\n\n  // The checkbox's label\n  @property({ type: String })\n  label = \"\";\n\n  // A Boolean which, if true, indicates that the checkbox is selected\n  @property({ type: Boolean, reflect: true })\n  checked = false;\n\n  // The checkbox's current value\n  @property({ type: String })\n  value = \"\";\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <input type=\"checkbox\" ?checked=\"${this.checked}\" value=\"${this.value}\" />\n      <span class=\"checkmark\"></span>\n      ${this.labelText}\n    `;\n  }\n\n  get labelText(): string | object {\n    if (this.label !== \"\") return this.label;\n    else return nothing;\n  }\n}\n","import { LitElement, TemplateResult, customElement, html } from \"lit-element\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/chip\";\n\n@customElement(\"chameleon-chip\")\nexport default class ChameleonChip extends LitElement {\n  /**\n   * Properties\n   */\n\n  // TODO(Nodza): Make chip closeable https://github.com/MaritzSTL/chameleon/issues/81\n  // A Boolean which, if true, indicates that the chip is closeable\n  // @property({ type: Boolean, reflect: true })\n  // closeable = false;\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <span>\n        <slot></slot>\n      </span>\n    `;\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { styleMap } from \"lit-html/directives/style-map.js\";\nimport { nothing } from \"lit-html\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/hero\";\nimport \"@chameleon-ds/skeleton/src/chameleon-skeleton\";\n\n@customElement(\"chameleon-hero\")\nexport default class ChameleonHero extends LitElement {\n  /**\n   * Properties\n   */\n  @property({ type: String })\n  title = \"\";\n\n  @property({ type: String })\n  subTitle = \"\";\n\n  @property({ type: String })\n  heroText = \"\";\n\n  @property({ type: String })\n  imageUrl = \"\";\n\n  @property({ type: String })\n  type = \"gradient\";\n\n  @property({ type: String })\n  gradient = \"var(--color-primary-dark), var(--color-secondary-dark)\";\n\n  @property({ type: Number })\n  gradientAlpha = 0.5;\n\n  @property({ type: Boolean })\n  loading = false;\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      ${this.loading\n        ? html`\n            <chameleon-skeleton height=\"${400}\"></chameleon-skeleton>\n          `\n        : html`\n            <div class=\"hero\" style=\"${styleMap(this.backgroundImageStyles)}\">\n              <header class=\"heading\">\n                ${this.title\n                  ? html`\n                      <h1 class=\"hero-title surface-color\">${this.title}</h1>\n                    `\n                  : nothing}\n                ${this.subTitle\n                  ? html`\n                      <h3 class=\"hero-subtitle surface-color\">\n                        ${this.subTitle}\n                      </h3>\n                    `\n                  : nothing}\n                ${this.heroText\n                  ? html`\n                      <p class=\"hero-text surface-color\">\n                        ${this.heroText}\n                      </p>\n                    `\n                  : nothing}\n                <slot></slot>\n              </header>\n            </div>\n          `}\n    `;\n  }\n\n  get backgroundImageStyles() {\n    switch (this.type) {\n      case \"imageGradient\":\n        return {\n          backgroundImage: `linear-gradient(to right, ${this.gradientOverlay}), url(${this.imageUrl})`\n        };\n      case \"gradient\":\n        return {\n          backgroundImage: `linear-gradient(to right, ${this.gradientHex})`\n        };\n      case \"image\":\n        return {\n          backgroundImage: `url(${this.imageUrl})`\n        };\n      default:\n        return {\n          backgroundImage: `linear-gradient(to right, ${this.gradientHex})`\n        };\n    }\n  }\n\n  get gradientHex() {\n    return this.gradient.split(\",\").map(h => h.trim());\n  }\n\n  get gradientOverlay() {\n    return this.gradient\n      .split(\",\")\n      .map(h => this.hex2rgba(h.trim(), this.gradientAlpha));\n  }\n\n  private hex2rgba(hex, alpha = 0.5) {\n    const [r, g, b] = hex.match(/\\w\\w/g).map(x => parseInt(x, 16));\n    return `rgba(${r},${g},${b},${alpha})`;\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { nothing, svg, SVGTemplateResult } from \"lit-html\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/input\";\n\n@customElement(\"chameleon-input\")\nexport default class ChameleonInput extends LitElement {\n  /**\n   * Lifecycle Methods\n   */\n  firstUpdated() {\n    // TODO(ryuhhnn): This isn't the best strategy for hydrating in the\n    // correct error state. Come back to this to come up with better solution.\n    this.requestUpdate();\n  }\n\n  /**\n   * Properties\n   */\n  // A string indicating the type of autocomplete functionality, if any, to allow on the input\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  // A Boolean which, if present, makes the input take focus when the form is presented\n  @property({ type: Boolean, reflect: true })\n  autofocus = false;\n\n  // A Boolean attribute which is present if the input should be disabled\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  // A Boolean attribute which, if true, indicates that the input cannot be edited\n  @property({ type: Boolean, reflect: true })\n  readonly = false;\n\n  // A Boolean which, if true, indicates that the input must have a value before the form can be submitted\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  // A string indicating which input type the <input> element represents\n  @property({ type: String, reflect: true })\n  type = \"text\";\n\n  @property({ type: String, reflect: true })\n  placeholder = \"\";\n\n  // The input's current value\n  @property({ type: String })\n  value = \"\";\n\n  // The input's min value (available in type=\"number\")\n  @property({ type: Number, reflect: true })\n  min = null;\n\n  // The input's max value (available in type=\"number\")\n  @property({ type: Number, reflect: true })\n  max = null;\n\n  // The input's label\n  @property({ type: String })\n  label = \"\";\n\n  // The input's error message\n  @property({ type: String })\n  validationMessage = \"\";\n\n  // Element has a left icon\n  @property({ type: Boolean, reflect: true })\n  \"icon-left\" = false;\n\n  // Element has a right icon\n  @property({ type: Boolean, reflect: true })\n  \"icon-right\" = false;\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      ${this.labelText}\n      <div\n        class=\"\n        ${classMap({\n          invalid: this._invalidState,\n          \"input-wrapper\": true,\n          \"icon-left\": this[\"icon-left\"],\n          \"icon-right\": this[\"icon-right\"]\n        })}\"\n      >\n        <slot name=\"icon-left\"></slot>\n        ${this._inputEl}\n        <slot name=\"icon-right\"></slot>\n      </div>\n      ${this.errorText}\n    `;\n  }\n\n  get _inputEl(): TemplateResult {\n    switch (this.type) {\n      case \"text\":\n        return html`\n          <input\n            name=\"cha-input\"\n            .type=\"${this.type}\"\n            .placeholder=\"${this.placeholder}\"\n            .value=\"${this.value}\"\n            ?autocomplete=\"${this.autocomplete}\"\n            ?autofocus=\"${this.autofocus}\"\n            ?disabled=\"${this.disabled}\"\n            ?readonly=\"${this.readonly}\"\n            ?required=\"${this.required}\"\n            @input=\"${this._handleInput}\"\n            @blur=\"${this._handleBlur}\"\n            @invalid=\"${this._handleInvalid}\"\n          />\n        `;\n      case \"number\":\n        return html`\n          <input\n            name=\"cha-input\"\n            .type=\"${this.type}\"\n            .placeholder=\"${this.placeholder}\"\n            .value=\"${this.value}\"\n            .min=\"${this.min}\"\n            .max=\"${this.max}\"\n            ?autocomplete=\"${this.autocomplete}\"\n            ?autofocus=\"${this.autofocus}\"\n            ?disabled=\"${this.disabled}\"\n            ?readonly=\"${this.readonly}\"\n            ?required=\"${this.required}\"\n            @input=\"${this._handleInput}\"\n            @blur=\"${this._handleBlur}\"\n            @invalid=\"${this._handleInvalid}\"\n          />\n        `;\n      default:\n        return html`\n          <input\n            name=\"cha-input\"\n            .type=\"${this.type}\"\n            .placeholder=\"${this.placeholder}\"\n            .value=\"${this.value}\"\n            ?autocomplete=\"${this.autocomplete}\"\n            ?autofocus=\"${this.autofocus}\"\n            ?disabled=\"${this.disabled}\"\n            ?readonly=\"${this.readonly}\"\n            ?required=\"${this.required}\"\n            @input=\"${this._handleInput}\"\n            @blur=\"${this._handleBlur}\"\n            @invalid=\"${this._handleInvalid}\"\n          />\n        `;\n    }\n  }\n\n  get _el(): HTMLInputElement | null {\n    if (this.shadowRoot !== null) {\n      return this.shadowRoot.querySelector(\"input\");\n    } else return null;\n  }\n\n  get labelText(): TemplateResult | object {\n    if (this.label !== \"\") {\n      return html`\n        <label\n          for=\"cha-input\"\n          class=\"${classMap({ invalid: this._invalidState })}\"\n          >${this.label}</label\n        >\n      `;\n    } else return nothing;\n  }\n\n  get errorText(): TemplateResult | object {\n    if (this.validationMessage !== \"\") {\n      return html`\n        <span class=\"error\">${this.warningIcon} ${this.validationMessage}</span>\n      `;\n    } else return nothing;\n  }\n\n  get validity(): ValidityState | undefined {\n    if (this._el !== null) return this._el.validity;\n    else return undefined;\n  }\n\n  get willValidate(): boolean {\n    if (this._el !== null) return this._el.willValidate;\n    else return false;\n  }\n\n  checkValidity(): boolean {\n    if (this._el !== null) return this._el.checkValidity();\n    else return false;\n  }\n\n  get _invalidState(): boolean {\n    if (this._el !== null) {\n      if (!this.checkValidity() || this.validationMessage.length > 0) {\n        return true;\n      } else return false;\n    }\n  }\n\n  _handleInput(e: any): void {\n    // e must have a value of `any` right now because of: https://stackoverflow.com/a/57331338/3713527\n    this.value = e.target.value;\n  }\n\n  _handleBlur(): void {\n    const elementValid = this.checkValidity();\n    if (elementValid) this.validationMessage = \"\";\n  }\n\n  _handleInvalid(): void {\n    this.validationMessage =\n      this._el !== null ? this._el.validationMessage : \"\";\n  }\n\n  get warningIcon(): SVGTemplateResult {\n    return svg`\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"14\"\n        height=\"14\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"feather feather-search\"\n      >\n        <circle cx=\"12\" cy=\"12\" r=\"10\" />\n        <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\" />\n        <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\" />\n      </svg>\n  `;\n  }\n}\n","import { LitElement, TemplateResult, customElement, html } from \"lit-element\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/loader\";\n\n@customElement(\"chameleon-loader\")\nexport default class ChameleonLoader extends LitElement {\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <div class=\"lds-ellipsis\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    `;\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { nothing } from \"lit-html\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/radio\";\n\n@customElement(\"chameleon-radio\")\nexport default class ChameleonRadio extends LitElement {\n  /**\n   * Properties\n   */\n\n  // The radio's label\n  @property({ type: String })\n  label = \"\";\n\n  // A Boolean which, if true, indicates that the radio is selected\n  @property({ type: Boolean, reflect: true })\n  checked = false;\n\n  // The radio's current value\n  @property({ type: String })\n  value = \"\";\n\n  // A Boolean to disable radio button\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <input\n        type=\"radio\"\n        ?checked=\"${this.checked}\"\n        value=\"${this.value}\"\n        ?disabled=\"${this.disabled}\"\n      />\n      <span class=\"checkmark ${this.disabled ? \"disabled\" : \"\"}\"></span>\n      ${this.labelText}\n    `;\n  }\n\n  get labelText(): string | object {\n    if (this.label !== \"\") return this.label;\n    else return nothing;\n  }\n}\n","import {\n  LitElement,\n  css,\n  TemplateResult,\n  customElement,\n  html\n} from \"lit-element\";\nimport { styles as riceBallStyles } from \"./chameleon-rice-ball-dessert-styles\";\n\n@customElement(\"chameleon-rice-ball-dessert\")\nexport default class ChameleonCard extends LitElement {\n  /**\n   * Styles\n   */\n  static styles = [riceBallStyles];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <div class=\"bowl\">\n        <div class=\"back\"></div>\n        <div class=\"spoon\">\n          <div class=\"scoop\"></div>\n        </div>\n        <div class=\"contents\">\n          <div class=\"syrup\"></div>\n          <div class=\"riceball uno\">\n            <div class=\"face\"></div>\n          </div>\n          <div class=\"riceball dos\">\n            <div class=\"face\"></div>\n          </div>\n          <div class=\"riceball tres\">\n            <div class=\"face\"></div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { nothing } from \"lit-html\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/switch\";\n\n@customElement(\"chameleon-switch\")\nexport default class ChameleonSwitch extends LitElement {\n  /**\n   * Properties\n   */\n\n  // The switch's label\n  @property({ type: String })\n  label = \"\";\n\n  // A Boolean which, if true, indicates that the switch is selected\n  @property({ type: Boolean, reflect: true })\n  checked = false;\n\n  // The switch's current value\n  @property({ type: String })\n  value = \"\";\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <div class=\"switch\">\n        <input type=\"radio\" ?checked=\"${this.checked}\" value=\"${this.value}\" />\n        <span class=\"slider\"></span>\n      </div>\n      ${this.labelText}\n    `;\n  }\n\n  get labelText(): string | object {\n    if (this.label !== \"\") return this.label;\n    else return nothing;\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  html\n} from \"lit-element\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/tabs\";\n\n@customElement(\"chameleon-tabs\")\nexport default class ChameleonTabs extends LitElement {\n  constructor() {\n    super();\n    this.addEventListener(\"selected-changed\", this._handleSelectedChanged);\n  }\n\n  /**\n   * Lifecycle Methods\n   */\n  firstUpdated() {\n    const tabs = Array.from(this.querySelectorAll(\"chameleon-tab\"));\n\n    if (tabs.length <= 0)\n      throw new Error(\n        \"<chameleon-tabs> must have at least one <chameleon-tab> element\"\n      );\n\n    tabs.forEach((tab, i) => tab.setAttribute(\"data-index\", i.toString()));\n  }\n\n  updated(changedProperties) {\n    if (changedProperties.has(\"selected\")) {\n      const tabs = Array.from(this.querySelectorAll(\"chameleon-tab\"));\n\n      tabs.forEach((tab, i) => {\n        tab.removeAttribute(\"active\");\n        if (i === this.selected) tab.setAttribute(\"active\", \"true\");\n      });\n    }\n  }\n\n  /**\n   * Properties\n   */\n  @property({ type: Number, reflect: true })\n  selected = 0;\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      <slot></slot>\n    `;\n  }\n\n  _handleSelectedChanged(e): void {\n    e.preventDefault();\n    this.selected = parseInt(e.detail.value);\n  }\n}\n","import {\n  LitElement,\n  TemplateResult,\n  customElement,\n  html,\n  property\n} from \"lit-element\";\nimport { nothing } from \"lit-html\";\nimport base from \"@chameleon-ds/theme/base\";\nimport style from \"@chameleon-ds/theme/base/textarea\";\n\n@customElement(\"chameleon-textarea\")\nexport default class ChameleonTextarea extends LitElement {\n  /**\n   * Properties\n   */\n  // A string indicating the type of autocomplete functionality, if any, to allow on the input\n  @property({ type: Boolean, reflect: true })\n  autocomplete = false;\n\n  // A Boolean which, if present, makes the textarea take focus when the form is presented\n  @property({ type: Boolean, reflect: true })\n  autofocus = false;\n\n  // The visible width of the text control, in average character widths.\n  // If it is specified, it must be a positive integer. If it is not specified,\n  // the default value is 20.\n  @property({ type: Number, reflect: true })\n  cols = 20;\n\n  // A Boolean attribute which is present if the textarea should be disabled\n  @property({ type: Boolean, reflect: true })\n  disabled = false;\n\n  // The maximum number of characters (unicode code points) that the user can enter. If this value isn't specified, the user can enter an unlimited number of characters.\n  @property({ type: Number, reflect: true })\n  maxlength = null;\n\n  // The minimum number of characters (unicode code points) required that the user should enter.\n  @property({ type: Number, reflect: true })\n  minlength = null;\n\n  // A hint to the user of what can be entered in the control. Carriage returns or line-feeds within the placeholder text must be treated as line breaks when rendering the hint.\n  @property({ type: String, reflect: true })\n  placeholder = \"\";\n\n  // A Boolean attribute which, if true, indicates that the textarea cannot be edited\n  @property({ type: Boolean, reflect: true })\n  readonly = false;\n\n  // A Boolean which, if true, indicates that the textarea must have a value before the form can be submitted\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  // The number of visible text lines for the control.\n  @property({ type: Number, reflect: true })\n  rows = 2;\n\n  // Specifies whether the <textarea> is subject to spell checking by the underlying browser/OS.\n  @property({ type: Boolean, reflect: true })\n  spellcheck = false;\n\n  // The textarea's current value\n  @property({ type: String })\n  value = \"\";\n\n  // The textarea's label\n  @property({ type: String })\n  label = \"\";\n\n  // The textarea's error message\n  @property({ type: String })\n  validationMessage = \"\";\n\n  /**\n   * Styles\n   */\n  static styles = [base, style];\n\n  /**\n   * Template\n   */\n  render(): TemplateResult {\n    return html`\n      ${this.labelText}\n      <textarea\n        name=\"cha-textarea\"\n        .value=\"${this.value}\"\n        ?autocomplete=\"${this.autocomplete}\"\n        ?autofocus=\"${this.autofocus}\"\n        cols=\"${this.cols}\"\n        ?disabled=\"${this.disabled}\"\n        maxlength=\"${this.maxlength}\"\n        minlength=\"${this.minlength}\"\n        placeholder=\"${this.placeholder}\"\n        ?readonly=\"${this.readonly}\"\n        ?required=\"${this.required}\"\n        rows=\"${this.rows}\"\n        spellcheck=\"${this.spellcheck}\"\n        @blur=\"${this._handleBlur}\"\n        @invalid=\"${this._handleInvalid}\"\n      ></textarea>\n      ${this.errorText}\n    `;\n  }\n\n  get _el(): HTMLTextAreaElement | null {\n    if (this.shadowRoot !== null) {\n      return this.shadowRoot.querySelector(\"textarea\");\n    } else return null;\n  }\n\n  get labelText(): TemplateResult | object {\n    if (this.label !== \"\") {\n      return html`\n        <label for=\"cha-textarea\">${this.label}</label>\n      `;\n    } else return nothing;\n  }\n\n  get errorText(): TemplateResult | object {\n    if (this.validationMessage !== \"\") {\n      return html`\n        <span class=\"error\">${this.validationMessage}</span>\n      `;\n    } else return nothing;\n  }\n\n  get validity(): ValidityState | undefined {\n    if (this._el !== null) return this._el.validity;\n    else return undefined;\n  }\n\n  get willValidate(): boolean {\n    if (this._el !== null) return this._el.willValidate;\n    else return false;\n  }\n\n  checkValidity(): boolean {\n    if (this._el !== null) return this._el.checkValidity();\n    else return false;\n  }\n\n  _handleBlur(): void {\n    this.checkValidity();\n  }\n\n  _handleInvalid(): void {\n    this.validationMessage =\n      this._el !== null ? this._el.validationMessage : \"\";\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEA;;;;ACSA;AA+BA;;;;;;;;;;;AAfA;;ACRA;;AAEA;;;AAKA;;AAWA;;AAEA;;;AAKA;;AAWA;;AAEA;;;AAKA;;;ACjCA;AACA;;;;AAMA;;;;;AAaA;;;AAiBA;AACA;;;AAGA;AACA;;;;;;;;AAUA;;AC9DA;;AAEA;;AAIA;;ACLA;AAOA;AAGA;;ACJA;AACA;AACA;AACA;AARA;AAUA;;;AAKA;;AAkBA;AACA;AACA;AACA;AARA;AAUA;;;AAKA;;AAoBA;AACA;AACA;AACA;AAVA;AAYA;AACA;AACA;;;AAKA;;;;;;;;;;;;ACzEA;;;;;AAOA;;AAqBA;AACA;AACA;AACA;AACA;;AAIA;;AAwBA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;;AAwBA;;AAEA;AACA;AACA;AACA;;AAEA;;AAIA;;AC/GA;;ACEA;;AAEA;AACA;;AAIA;;ACTA;ACAA;;AAIA;;ACHA;;AAEA;;AAIA;;;;;;;;;;;;ACIA;;ACXA;;ACOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;;AAoBA;AACA;;;;AATA;;;;;;;;;;;;;;;ACnBA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;AAmBA;AAEA;AAEA;AACA;AAEA;AAEA;AAxBA;;;;;;;;;;ACLA;AAuBA;AAPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfA;AA2BA;;AAEA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;;;;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AAsCA;AAEA;AAEA;AACA;;AAEA;AAEA;AAEA;AACA;;AAGA;;AAGA;AACA;;AAGA;;AAGA;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AA8EA;;;AAGA;;;AAQA;;;AAGA;AAIA;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;;;AAWA;AACA;;AAGA;AAMA;AAEA;;;;;;;;;;;;;;;;;AA1GA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGA;;;AAipCA;;AAmDA;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AAwEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAIA;AASA;AAEA;AAMA;AAEA","sourceRoot":""}